#!/usr/bin/python3
# Special thanks to KR0SIV for his DAPNET2APRS program https://github.com/KR0SIV/DAPNET2APRS
# and N8ACL for his DAPNETNotifier program https://github.com/n8acl/DAPNETNotifier
# on both of which this program is based
# Copyright 2023 John Tetreault WA1OKB, released under the Gnu General Public License v3.0
#
import json
import re
import requests
import time
import http.client
import urllib
import sys
import aprslib
import logging
import configparser
from requests.auth import HTTPBasicAuth
from requests.exceptions import RequestException
from time import sleep

# Setup logging
logger = logging.getLogger('dapnet2aprs')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler('/var/log/pi-star/DAPNET2APRS.log')
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Read Config file and set variables
logger.info("Starting DAPNET2APRSNotifier...")
config = configparser.ConfigParser(inline_comment_prefixes='#')
read_config = config.read('/etc/dapnet2aprs')
if not read_config:
    logger.error(
        "Failed to read the config file at /etc/dapnet2aprs.  Did you forget to create it?")
    exit(1)
logger.info("Reading configuration file at /etc/dapnet2aprs")

try:
    wait_time = max(60, int(config['DEFAULT']['wait_time']))
    log_path = config['DEFAULT']['log_path']
    dapnet_username = config['DAPNET']['username']
    dapnet_password = config['DAPNET']['password']
    dapnet_server = config['DAPNET']['server']
    dapnet_emergency = config.getboolean('DAPNET','emergency_only')
    aprs_server = config['APRS']['server']
    callsign = config['APRS']['callsign']
    send_to = config['APRS']['send_to']
    db_engine = config['DATABASE']['engine']
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }

    if db_engine == 'mysql':
        logger.info("MySQL database engine selected")
        import mysql.connector
        from mysql.connector import Error
        mysqlhost = config['DATABASE']['host']
        mysqluser = config['DATABASE']['user']
        mysqlpassword = config['DATABASE']['password']
        db = config['DATABASE']['database']

    else:
        logger.info("SQLite database engine selected")
        import sqlite3 as sql
        from sqlite3 import Error
        db = config['DATABASE']['database']
except KeyError as e:
    key = e.args[0]
    logger.error(
        f"Failed to find '{e.args[0]}' value in /etc/dapnet2aprs config file")
    raise

if not dapnet_username or not dapnet_password:
    try:
        pistar_config = configparser.ConfigParser()
        read_pistar_config = pistar_config.read('/etc/dapnetapi.key')
        dapnet_username = pistar_config['DAPNETAPI']['USER']
        dapnet_password = pistar_config['DAPNETAPI']['PASS']
        logger.info(f"Got DAPNET credentials from dapnetapi.key file")
    except KeyError as e:
        key = e.args[0]
        logger.error(f"Failed to find '{e.args[0]}' value in /etc/dapnetapi.key")
        raise
dapnet_url = (f"http://{config['DAPNET']['server']}:8080/calls?ownerName={dapnet_username}")

# Define Functions

# Define SQL Functions
def create_connection(db_name):
    if db_engine == 'mysql':
        MAX_RETRIES = 5
        RETRY_DELAY = 5
        for attempt in range(MAX_RETRIES):
            try:
                connection = mysql.connector.connect(
                    host=mysqlhost,
                    user=mysqluser,
                    password=mysqlpassword
                )
                logger.info(
                    f"Connected to {mysqlhost} MySQL compatible database engine {connection}")
                break
            except Exception as e:
                if attempt < MAX_RETRIES -1:
                    logger.warning(f"{e} - Retrying...")
                    time.sleep(RETRY_DELAY)
                else:
                    logger.error(f"{e} - I'm giving up.")
                    raise
        try:
            cursor = connection.cursor()
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {db_name}")
            connection.database = db_name
        except Exception as e:
            logger.error(f"Failed to create the {db_name} database on {mysqlhost}: {e}")
            connection.close()
            raise
        try:
            cursor.execute("""CREATE TABLE IF NOT EXISTS messages (
                text VARCHAR(80),
                timestamp CHAR(27) NOT NULL,
                PRIMARY KEY (timestamp)
            );""")
            logger.info(f"Successfully connected to the {db_name} database on {mysqlhost} {connection}")
        except Exception as e:
            logger.error(f"Failed to create the 'messages' table in the {db_name} database on {mysqlhost}: {e}")
            connection.close()
            raise
    else:
        try:
            connection = sql.connect(db_name)
            cursor = connection.cursor()
            logger.info(f"Connected to SQLite Database Engine {connection}")
        except Exception as e:
            logger.error(f"Failed to connect to the {db_name} SQLite database: {e}")
            raise
        try:
            cursor.execute("""CREATE TABLE IF NOT EXISTS messages (
                text VARCHAR(80),
                timestamp CHAR(27) NOT NULL,
                PRIMARY KEY (timestamp)
            );""")
        except Exception as e:
            logger.error(f"Failed to create the 'messages' table in the {db_name} SQLite database: {e}")
            connection.close()
            raise

    return connection

def exec_sql(connection, sql):
    try:
        cur = connection.cursor()
        cur.execute(sql)
        connection.commit()
        return ()
    except Excepton as e:
        logger.error(f"Failed to execute SQL update: {e}")
        connection.close()
        raise


def select_sql(connection, sql):
    try:
        cur = connection.cursor()
        cur.execute(sql)
        return cur.fetchall()
    except Exception as e:
        logger.error(f"Failed to execute SQL query: {e}")
        connection.close()
        raise

# Get DAPNET API Data
def get_api_data():
    while True:
        response = None
        try:
            response = requests.get(
                dapnet_url,
                auth=HTTPBasicAuth(
                    dapnet_username,
                    dapnet_password),
                headers=headers,
                timeout=10)
            response.raise_for_status()
            return response.json()
        except (RequestException, Exception) as e:
            if response:
               errormsg = json.loads(response.text)
               e_n = errormsg.get('name')
               e_m = errormsg.get('message')
               logger.error(f"Failed to connect to {dapnet_url}:  {response.status_code} {e_n} {e_m}, retrying...")
            else:
               logger.error(f"An unexpected error occureed: {str(e)}, retrying...")
            sleep(wait_time)

# Define APRS functions
def aprspass(callsign: str):
    stop_here = callsign.find('-')
    if stop_here != -1:
        callsign = callsign[:stop_here]
    real_call = callsign[:10].upper()
    callsign = real_call
    hash_value = 0x73e2
    for i in range(0, len(real_call), 2):
        hash_value ^= ord(real_call[i]) << 8
        if i + 1 < len(real_call):
            hash_value ^= ord(real_call[i + 1])
    passcode = hash_value & 0x7fff
    logger.info(f"Calculated APRS passcode for {callsign} as {passcode}")
    return passcode

def send_aprs(msg):
    try:
        if len(msg) > 60:
            split_index = msg.rfind(' ', 0, 60)
            if split_index == -1:
                split_index = 60
            messages = [msg[:split_index], msg[split_index:].lstrip()]
        else:
            messages = [msg]
        for message in messages:
            logger.info(
                f"Forwarding message for {send_to} to APRS via {aprs_server}: {message}")
            AIS = aprslib.IS(str(callsign), passwd=str(aprs_passcode), host=str(aprs_server), port=14580)
            AIS.connect()
            AIS.sendall(f"DAPNET>APRS,TCPIP*::{send_to.ljust(9)}:MSG [{message}]")
        return True
    except Exception as e:
        logger.error(f"Failed to send APRS message {msg}: {e}  Will keep trying.")
        return False

# Main Program

aprs_passcode = aprspass(callsign)
connection = create_connection(db)
logger.info(f"DAPNET2APRSNotifier Started and polling {dapnet_url} for incoming DAPNET messages every {wait_time} seconds.")

while True:
    try:
        data = get_api_data()
        if data:
            for i in range(0, len(data)):
                text = data[i]['text']
                timestamp = data[i]['timestamp']
                emergency = data[i]['emergency']
                if dapnet_emergency:
                    if emergency:
                        sendmessage = True
                    else:
                        sendmessage = False
                else:
                    sendmessage = True
                if sendmessage:
                    sql = (f"SELECT COUNT(text) AS text_cnt FROM messages WHERE text = '{text}' AND timestamp = '{timestamp}';")
                    result = select_sql(connection, sql)
                    for row in result:
                        text_cnt = row[0]
                    if text_cnt == 0:
                        sent = send_aprs(text)
                        if sent:
                            sql = (f"INSERT INTO messages (text, timestamp) VALUES ('{text}','{timestamp}');")
                            exec_sql(connection, sql)
                    sendmessage = False
        sleep(wait_time)
    except Exception as e:
        logger.error(str(e))
        connection.close()
        raise
